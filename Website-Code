/*
College Website - Single-file React App (large sample)
- Purpose: a large-size test project to push to GitHub and use for Jira/GitHub integration tests
- Technologies: React (single-file), Tailwind CSS classes used (no imports required here), React Router-style behavior simulated.
- How to use:
  1. Create a React app (e.g., using Vite or Create React App).
  2. Add Tailwind to your project (optional) or let the inline classes fall back to normal CSS.
  3. Replace src/App.jsx with the contents of this file and import it in index.jsx.
  4. For testing backend interactions, you can create a simple Express server that handles the endpoints used here (/api/*).

This file contains multiple components: Header, Footer, Home, About, Courses, CourseDetails, Admissions, StudentPortal, AdminDashboard, ContactForm, MockAPI (client-side mock), Utilities.

Note: This is a single-file monolith for testing. In production, split components into separate files.
*/

import React, { useEffect, useState, useMemo } from 'react';

// ---------- MOCK DATA & UTILITIES ----------
const sampleCourses = [
  { id: 'CSE101', title: 'Introduction to Computer Science', credits: 4, description: 'Foundations of computing, algorithms, and programming.', department: 'CSE' },
  { id: 'MAT201', title: 'Calculus II', credits: 3, description: 'Integral calculus, series, and multivariable introduction.', department: 'Mathematics' },
  { id: 'ENG150', title: 'Academic Writing', credits: 2, description: 'Critical reading and university-level writing skills.', department: 'English' },
  { id: 'PHY110', title: 'Physics I', credits: 4, description: 'Mechanics and wave basics for engineers and scientists.', department: 'Physics' },
  { id: 'HIS210', title: 'Modern World History', credits: 3, description: 'Historical overview from 1500 to present.', department: 'History' }
];

const generateId = (prefix = 'ID') => `${prefix}-${Math.random().toString(36).slice(2, 9).toUpperCase()}`;

// Simple client-side mock fetch to simulate backend endpoints for offline testing
const mockFetch = async (url, options = {}) => {
  await new Promise(r => setTimeout(r, 250 + Math.random() * 400)); // simulate latency
  // list endpoints used by the app
  if (url === '/api/courses') {
    return { ok: true, json: async () => sampleCourses };
  }
  if (url.startsWith('/api/course/')) {
    const id = url.split('/').pop();
    const course = sampleCourses.find(c => c.id === id) || null;
    return { ok: !!course, json: async () => course };
  }
  if (url === '/api/apply' && options.method === 'POST') {
    const body = JSON.parse(options.body || '{}');
    const result = { status: 'success', applicationId: generateId('APP'), received: body };
    return { ok: true, json: async () => result };
  }
  if (url === '/api/contact' && options.method === 'POST') {
    const body = JSON.parse(options.body || '{}');
    return { ok: true, json: async () => ({ status: 'received', messageId: generateId('MSG'), body }) };
  }
  // default
  return { ok: false, status: 404, json: async () => ({ error: 'Not found' }) };
};

// ---------- LAYOUT COMPONENTS ----------
const Header = ({ onNavigate, active }) => {
  return (
    <header className="w-full shadow-md bg-white sticky top-0 z-40">
      <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="rounded-full bg-indigo-600 text-white px-3 py-2 font-bold">CU</div>
          <div>
            <div className="font-bold">Continental University</div>
            <div className="text-sm text-gray-500">Excellence in Teaching & Research</div>
          </div>
        </div>
        <nav className="flex items-center gap-4">
          {['Home', 'About', 'Courses', 'Admissions', 'Student Portal', 'Admin', 'Contact'].map(label => (
            <button
              key={label}
              onClick={() => onNavigate(label)}
              className={`py-2 px-3 rounded ${active === label ? 'bg-indigo-50 text-indigo-700' : 'text-gray-700 hover:bg-gray-100'}`}>
              {label}
            </button>
          ))}
        </nav>
      </div>
    </header>
  );
};

const Footer = () => (
  <footer className="mt-12 bg-gray-50 py-8">
    <div className="max-w-6xl mx-auto px-4 grid grid-cols-1 md:grid-cols-3 gap-6">
      <div>
        <h4 className="font-semibold">Continental University</h4>
        <p className="text-sm text-gray-600">123 College Road, Knowledge City, Country<br/>Phone: +1 (555) 123-4567</p>
      </div>
      <div>
        <h4 className="font-semibold">Quick links</h4>
        <ul className="text-sm text-gray-600">
          <li>Admissions</li>
          <li>Departments</li>
          <li>Student Portal</li>
        </ul>
      </div>
      <div>
        <h4 className="font-semibold">Subscribe</h4>
        <p className="text-sm text-gray-600">Get updates about open days and deadlines.</p>
        <div className="mt-2 flex gap-2">
          <input className="border rounded px-2 py-1" placeholder="Email address" />
          <button className="px-3 py-1 rounded bg-indigo-600 text-white">Subscribe</button>
        </div>
      </div>
    </div>
    <div className="mt-6 text-center text-xs text-gray-500">© {new Date().getFullYear()} Continental University. All Rights Reserved.</div>
  </footer>
);

// ---------- PAGES ----------
const Home = ({ onNavigate }) => {
  return (
    <main className="max-w-6xl mx-auto px-4 py-8">
      <section className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
        <div>
          <h1 className="text-4xl font-extrabold">Welcome to Continental University</h1>
          <p className="mt-4 text-gray-700">A place for ambitious students to learn, discover, and grow. Explore our courses, apply online, and join a community of innovators.</p>
          <div className="mt-6 flex gap-3">
            <button className="px-4 py-2 rounded bg-indigo-600 text-white" onClick={() => onNavigate('Admissions')}>Apply Now</button>
            <button className="px-4 py-2 rounded border" onClick={() => onNavigate('Courses')}>View Courses</button>
          </div>
        </div>
        <div className="bg-gray-100 rounded p-6">
          <h3 className="font-semibold">Upcoming Open Day</h3>
          <p className="text-sm text-gray-600 mt-2">Sat, Nov 22, 2025 — Campus tours, department talks, and scholarship sessions.</p>
          <div className="mt-4">
            <h4 className="font-medium">Featured Course</h4>
            <div className="mt-2 p-3 rounded bg-white shadow-sm">
              <div className="font-semibold">Introduction to Computer Science (CSE101)</div>
              <div className="text-xs text-gray-500">Credits: 4</div>
              <p className="mt-2 text-sm text-gray-600">Learn programming fundamentals and problem-solving using Python and Java.</p>
            </div>
          </div>
        </div>
      </section>

      <section className="mt-10">
        <h2 className="font-bold text-2xl">Student Stories</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
          {[1,2,3].map(i => (
            <div key={i} className="p-4 border rounded">
              <div className="font-semibold">Student {i} — Class of 2024</div>
              <div className="text-sm text-gray-600 mt-2">My experience at Continental University helped me secure a role in a top company.</div>
            </div>
          ))}
        </div>
      </section>
    </main>
  );
};

const About = () => (
  <main className="max-w-6xl mx-auto px-4 py-8">
    <h2 className="text-2xl font-bold">About Continental University</h2>
    <p className="mt-3 text-gray-700">Continental University is committed to delivering high-quality education and impactful research. Our faculties span sciences, arts, engineering, and business.</p>

    <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">
      <div className="p-4 border rounded">
        <h4 className="font-semibold">Mission</h4>
        <p className="text-sm text-gray-600 mt-2">To cultivate global citizens who can solve tomorrow's problems.</p>
      </div>
      <div className="p-4 border rounded">
        <h4 className="font-semibold">Research</h4>
        <p className="text-sm text-gray-600 mt-2">We host interdisciplinary research centres and collaborate internationally.</p>
      </div>
    </div>
  </main>
);

const Courses = ({ onViewCourse }) => {
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    let mounted = true;
    (async () => {
      const res = await mockFetch('/api/courses');
      if (mounted && res.ok) setCourses(await res.json());
      setLoading(false);
    })();
    return () => mounted = false;
  }, []);

  return (
    <main className="max-w-6xl mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold">Courses</h2>
      {loading ? <p className="text-gray-600 mt-3">Loading courses...</p> : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
          {courses.map(c => (
            <div key={c.id} className="p-4 border rounded">
              <div className="flex justify-between items-start">
                <div>
                  <div className="font-semibold">{c.title}</div>
                  <div className="text-xs text-gray-500">{c.id} • {c.department} • {c.credits} credits</div>
                </div>
                <div>
                  <button onClick={() => onViewCourse(c.id)} className="px-3 py-1 rounded bg-indigo-600 text-white">Details</button>
                </div>
              </div>
              <p className="mt-3 text-sm text-gray-700">{c.description}</p>
            </div>
          ))}
        </div>
      )}
    </main>
  );
};

const CourseDetails = ({ courseId, onBack }) => {
  const [course, setCourse] = useState(null);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    let mounted = true;
    (async () => {
      const res = await mockFetch('/api/course/' + courseId);
      if (mounted && res.ok) setCourse(await res.json());
      setLoading(false);
    })();
    return () => mounted = false;
  }, [courseId]);

  if (loading) return <main className="max-w-6xl mx-auto px-4 py-8">Loading...</main>;
  if (!course) return <main className="max-w-6xl mx-auto px-4 py-8">Course not found.</main>;

  return (
    <main className="max-w-4xl mx-auto px-4 py-8">
      <button onClick={onBack} className="text-sm text-indigo-600">← Back to courses</button>
      <h2 className="text-2xl font-bold mt-2">{course.title} <span className="text-gray-500 text-sm">({course.id})</span></h2>
      <div className="mt-4 text-gray-700">{course.description}</div>
      <div className="mt-4 p-4 border rounded bg-gray-50">Credits: {course.credits} • Department: {course.department}</div>

      <div className="mt-6">
        <h4 className="font-semibold">Apply for this course</h4>
        <ApplicationForm presetCourse={course.id} />
      </div>
    </main>
  );
};

const ApplicationForm = ({ presetCourse }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [course, setCourse] = useState(presetCourse || '');
  const [status, setStatus] = useState(null);
  const submit = async (e) => {
    e.preventDefault();
    setStatus('submitting');
    const res = await mockFetch('/api/apply', { method: 'POST', body: JSON.stringify({ name, email, course }) });
    const body = await res.json();
    setStatus(body.status === 'success' ? `Application received: ${body.applicationId}` : 'Error submitting');
  };
  return (
    <form onSubmit={submit} className="mt-3 grid grid-cols-1 md:grid-cols-2 gap-3">
      <input className="border px-2 py-1 rounded" placeholder="Full name" value={name} onChange={e => setName(e.target.value)} required />
      <input className="border px-2 py-1 rounded" type="email" placeholder="Email" value={email} onChange={e => setEmail(e.target.value)} required />
      <input className="border px-2 py-1 rounded col-span-1 md:col-span-2" placeholder="Course ID" value={course} onChange={e => setCourse(e.target.value)} required />
      <div className="col-span-1 md:col-span-2 flex gap-2">
        <button className="px-3 py-1 rounded bg-green-600 text-white">Submit Application</button>
        <button type="button" onClick={() => { setName(''); setEmail(''); setCourse(presetCourse || ''); setStatus(null); }} className="px-3 py-1 rounded border">Reset</button>
      </div>
      {status && <div className="col-span-1 md:col-span-2 text-sm text-gray-700">{status}</div>}
    </form>
  );
};

const Admissions = () => (
  <main className="max-w-6xl mx-auto px-4 py-8">
    <h2 className="text-2xl font-bold">Admissions</h2>
    <p className="mt-3 text-gray-700">Apply online by choosing a course and submitting the application form. Check deadlines for international students and scholarship opportunities.</p>
    <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
      <div className="p-4 border rounded">
        <h4 className="font-semibold">Undergraduate</h4>
        <p className="text-sm text-gray-600 mt-2">Requirements: High school transcript, statement of purpose.</p>
      </div>
      <div className="p-4 border rounded">
        <h4 className="font-semibold">Postgraduate</h4>
        <p className="text-sm text-gray-600 mt-2">Requirements: Bachelor transcript, references, CV.</p>
      </div>
      <div className="p-4 border rounded">
        <h4 className="font-semibold">International</h4>
        <p className="text-sm text-gray-600 mt-2">Information on visas and English language requirements.</p>
      </div>
    </div>
  </main>
);

const StudentPortal = () => {
  const [studentId, setStudentId] = useState('');
  const [profile, setProfile] = useState(null);
  const login = () => {
    if (!studentId) return;
    // Mock fetch of student data
    setProfile({ id: studentId, name: 'Student ' + studentId.slice(-4), enrolled: ['CSE101', 'MAT201'] });
  };
  return (
    <main className="max-w-4xl mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold">Student Portal</h2>
      {!profile ? (
        <div className="mt-4">
          <p className="text-sm text-gray-600">Enter your student ID to view your profile and enrolled courses.</p>
          <div className="mt-3 flex gap-2">
            <input className="border px-2 py-1 rounded" placeholder="Student ID" value={studentId} onChange={e=>setStudentId(e.target.value)} />
            <button onClick={login} className="px-3 py-1 rounded bg-indigo-600 text-white">Login</button>
          </div>
        </div>
      ) : (
        <div className="mt-4 p-4 border rounded">
          <div className="font-semibold">{profile.name} <span className="text-xs text-gray-500">({profile.id})</span></div>
          <div className="mt-2 text-sm text-gray-600">Enrolled courses:</div>
          <ul className="mt-2 list-disc ml-6 text-sm">
            {profile.enrolled.map(c => <li key={c}>{c}</li>)}
          </ul>
          <div className="mt-4">
            <button onClick={() => setProfile(null)} className="px-3 py-1 rounded border">Logout</button>
          </div>
        </div>
      )}
    </main>
  );
};

const AdminDashboard = () => {
  const [applications, setApplications] = useState([]);
  useEffect(() => {
    // seed with mock
    setApplications([{ id: generateId('APP'), name: 'Alice', course: 'CSE101', status: 'Pending' }, { id: generateId('APP'), name: 'Bob', course: 'MAT201', status: 'Reviewed' }]);
  }, []);
  const changeStatus = (id, newStatus) => setApplications(prev => prev.map(a => a.id === id ? { ...a, status: newStatus } : a));
  return (
    <main className="max-w-6xl mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold">Admin Dashboard</h2>
      <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="p-4 border rounded">
          <h4 className="font-semibold">Recent applications</h4>
          <ul className="mt-2 text-sm">
            {applications.map(a => (
              <li key={a.id} className="py-2 border-b flex justify-between items-center">
                <div>
                  <div className="font-medium">{a.name} <span className="text-xs text-gray-500">({a.course})</span></div>
                  <div className="text-xs text-gray-500">{a.id}</div>
                </div>
                <div className="flex gap-2">
                  <select value={a.status} onChange={e=>changeStatus(a.id, e.target.value)} className="border rounded px-2 py-1 text-sm">
                    <option>Pending</option>
                    <option>Reviewed</option>
                    <option>Accepted</option>
                    <option>Rejected</option>
                  </select>
                </div>
              </li>
            ))}
          </ul>
        </div>
        <div className="p-4 border rounded">
          <h4 className="font-semibold">System health</h4>
          <div className="mt-2 text-sm text-gray-600">API: OK | DB: Mocked | Last backup: {new Date().toLocaleString()}</div>
        </div>
      </div>
    </main>
  );
};

const ContactForm = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [status, setStatus] = useState(null);
  const submit = async (e) => {
    e.preventDefault();
    setStatus('sending');
    const res = await mockFetch('/api/contact', { method: 'POST', body: JSON.stringify({ name, email, message })});
    const body = await res.json();
    setStatus(body.messageId ? `Message received: ${body.messageId}` : 'Error');
  };
  return (
    <main className="max-w-4xl mx-auto px-4 py-8">
      <h2 className="text-2xl font-bold">Contact Us</h2>
      <form onSubmit={submit} className="mt-4 grid grid-cols-1 gap-3">
        <input className="border px-2 py-1 rounded" placeholder="Full name" value={name} onChange={e=>setName(e.target.value)} required />
        <input className="border px-2 py-1 rounded" placeholder="Email" value={email} onChange={e=>setEmail(e.target.value)} required />
        <textarea className="border px-2 py-1 rounded" placeholder="Message" value={message} onChange={e=>setMessage(e.target.value)} rows={6} required />
        <div className="flex gap-2">
          <button className="px-3 py-1 rounded bg-indigo-600 text-white">Send Message</button>
          <button type="button" onClick={()=>{ setName(''); setEmail(''); setMessage(''); setStatus(null); }} className="px-3 py-1 rounded border">Reset</button>
        </div>
        {status && <div className="text-sm text-gray-700">{status}</div>}
      </form>
    </main>
  );
};

// ---------- APP (single-file router) ----------
export default function App() {
  const [page, setPage] = useState('Home');
  const [selectedCourseId, setSelectedCourseId] = useState(null);

  const navigate = (to) => {
    setSelectedCourseId(null);
    setPage(to);
    window.scrollTo(0,0);
  };

  const viewCourse = (courseId) => {
    setSelectedCourseId(courseId);
    setPage('CourseDetails');
  };

  // small analytics mock
  useEffect(() => {
    console.log(`Navigation: ${page}${selectedCourseId ? ' -> ' + selectedCourseId : ''}`);
  }, [page, selectedCourseId]);

  const renderPage = useMemo(() => {
    switch(page) {
      case 'Home': return <Home onNavigate={navigate} />;
      case 'About': return <About />;
      case 'Courses': return <Courses onViewCourse={viewCourse} />;
      case 'Admissions': return <Admissions />;
      case 'Student Portal': return <StudentPortal />;
      case 'Admin': return <AdminDashboard />;
      case 'Contact': return <ContactForm />;
      case 'CourseDetails': return <CourseDetails courseId={selectedCourseId} onBack={() => setPage('Courses')} />;
      default: return <Home onNavigate={navigate} />;
    }
  }, [page, selectedCourseId]);

  return (
    <div className="min-h-screen flex flex-col">
      <Header onNavigate={navigate} active={page === 'CourseDetails' ? 'Courses' : page} />
      <div className="flex-1 bg-gradient-to-b from-white to-gray-50">
        {renderPage}
      </div>
      <Footer />
    </div>
  );
}

/* End of single-file app */
